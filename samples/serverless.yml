service: mikoto-sample
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x

  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}

  memorySize: 128
  architecture: arm64

  logRetentionInDays: 7
  versionFunctions: false

  timeout: 3

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STAGE: ${self:provider.stage}
    RABBITMQ_URI: ${env:RABBITMQ_URI}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource:
        - ${self:custom.sqsDemo}

package:
  excludeDevDependencies: true
  # 배포할때는 artifact만 활성화, 개발할때는 비활성화
  # artifact가 켜져있으면 serverless-offline이 artifact의 압축을 풀어서 실행하려고한다
  artifact: ./artifacts/artifact.zip

functions:
  sqsEnqueue:
    handler: src/index.sqs_enqueue
  amqpEnqueue:
    handler: src/index.amqp_enqueue
  commonDequeue:
    handler: src/index.common_dequeue
    maximumEventAge: 7200
    maximumRetryAttempts: 0
    # events:
    #   - sqs:
    #       arn: ${self:custom.sqsDemo}
    #       enabled: true
  commonDequeue2:
    handler: src/index.common_dequeue
    maximumEventAge: 7200
    maximumRetryAttempts: 0

resources:
  Resources:
    DemoQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-demo

custom:
  sqsDemo: arn:aws:sqs:${self:provider.region}:${aws:accountId}:${self:service}-${self:provider.stage}-demo
